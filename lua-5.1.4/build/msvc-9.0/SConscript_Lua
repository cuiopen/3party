# sln2scons.py autogenerated SConscript
Import('env')
e = env.Clone()
e['CPPDEFINES'] = e['CPPDEFINES'] + ['_UNICODE', 'UNICODE', u'WIN32', u'NDEBUG', u'_LIB']
if not e['MYPLATFORM'] == 'winnt':
    e.Append(LIBS='m')
else:
    pass
    e.Append(CCFLAGS=' /EHsc')
e['CPPPATH'] = ['./']

Lua = e.StaticLibrary('../../lib/Lua', ['../../include/lapi.c', '../../include/lauxlib.c', '../../include/lbaselib.c', '../../include/lcode.c', '../../include/ldblib.c', '../../include/ldebug.c', '../../include/ldo.c', '../../include/ldump.c', '../../include/lfunc.c', '../../include/lgc.c', '../../include/linit.c', '../../include/liolib.c', '../../include/llex.c', '../../include/lmathlib.c', '../../include/lmem.c', '../../include/loadlib.c', '../../include/lobject.c', '../../include/lopcodes.c', '../../include/loslib.c', '../../include/lparser.c', '../../include/lstate.c', '../../include/lstring.c', '../../include/lstrlib.c', '../../include/ltable.c', '../../include/ltablib.c', '../../include/ltm.c', '../../include/lua.c', '../../include/luac.c', '../../include/lundump.c', '../../include/lvm.c', '../../include/lzio.c', '../../include/print.c'])
e.Default(Lua)
e.Install(Dir('#/' + e['MYPLATFORM'] + '/lib/release'), Lua)

if 'distclean' in COMMAND_LINE_TARGETS:
    Execute(Delete('Lua'))
    Execute(Delete(Dir('#/' + e['MYPLATFORM'] + '/bin/release').abspath + '/' + str(Lua[0])))
    Execute(Delete(Glob('*.o')))
    Execute(Delete(Glob('*.so')))
    Execute(Delete(Glob('*.os')))
    Execute(Delete(Glob('*.a')))
    Execute(Delete(Glob('*.la')))
    Execute(Delete(Glob('*.dylib')))

if 'pack' in COMMAND_LINE_TARGETS:
    Execute(Copy(Dir('#/' + e['MYPLATFORM'] + '/bin/release'), Lua[0]))
    e.Alias('pack', Dir('#/' + e['MYPLATFORM'] + '/bin/release'))

